from dotenv import load_dotenv
import os
import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import aiohttp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_path = os.path.join(os.getcwd(), ".env")
if not os.path.exists(dotenv_path):
    logger.error(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {dotenv_path}")
    exit(1)
else:
    logger.info(f"–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {dotenv_path}")
    load_dotenv(dotenv_path)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
for key in ["TELEGRAM_BOT_TOKEN", "CACHE_TIME"]:
    value = os.getenv(key)
    if value:
        logger.info(f"{key}: {'*' * len(value) if key == 'TELEGRAM_BOT_TOKEN' else value}")
    else:
        logger.warning(f"{key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
token = os.getenv("TELEGRAM_BOT_TOKEN")
if not token:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
    exit(1)

cache_time_env = os.getenv("CACHE_TIME")
try:
    CACHE_TIME = int(cache_time_env) if cache_time_env else 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
except ValueError:
    logger.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è CACHE_TIME. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3600 —Å–µ–∫—É–Ω–¥.")
    CACHE_TIME = 3600

cached_rate = None
last_update_time = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
async def get_usd_to_rub_rate(force_update=False):
    global cached_rate, last_update_time
    current_time = time.time()

    if not force_update and cached_rate is not None and (current_time - last_update_time < CACHE_TIME):
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å.")
        return cached_rate

    url = "https://api.exchangerate-api.com/v4/latest/USD"
    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞."

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({url}): {response.status}")
                    message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {response.status}"
                    return None

                data = await response.json()
                usd_rate = data['rates']['RUB']
                cached_rate = usd_rate
                last_update_time = current_time
                logger.info(f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {usd_rate:.2f} RUB")
                return usd_rate
    except aiohttp.ClientConnectionError as e:
        logger.error(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API ({url}): {e}")
        message = f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É."
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({url}): {e}")
        message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        return None
    finally:
        if "–ù–µ —É–¥–∞–ª–æ—Å—å" in message:
            logger.warning(message)

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_further_actions_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ—â–µ —Ä–∞–∑", callback_data="rate")],
        [InlineKeyboardButton("üî¥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏", callback_data="calc")],  # –ö—Ä–∞—Å–Ω—ã–π —ç–º–æ–¥–∑–∏
        [InlineKeyboardButton("üü¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã", callback_data="rub_to_usd")],  # –ó–µ–ª–µ–Ω—ã–π —ç–º–æ–¥–∑–∏
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞", callback_data="rate")],
        [InlineKeyboardButton("üî¥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏", callback_data="calc")],  # –ö—Ä–∞—Å–Ω—ã–π —ç–º–æ–¥–∑–∏
        [InlineKeyboardButton("üü¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã", callback_data="rub_to_usd")]  # –ó–µ–ª–µ–Ω—ã–π —ç–º–æ–¥–∑–∏
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–æ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è

    if query.data == "rate":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞'")
        usd_rate = await get_usd_to_rub_rate()
        if usd_rate is not None:
            message = f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é: {usd_rate:.2f} RUB"
        else:
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é
        await query.edit_message_text(
            text=message,
            reply_markup=create_further_actions_keyboard()
        )

    elif query.data == "calc":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏'")
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):")
        context.user_data["awaiting_calc"] = "usd_to_rub"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è USD ‚Üí RUB

    elif query.data == "rub_to_usd":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã'")
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9816):")
        context.user_data["awaiting_calc"] = "rub_to_usd"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è RUB ‚Üí USD

    elif query.data == "start":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞", callback_data="rate")],
            [InlineKeyboardButton("üî¥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏", callback_data="calc")],  # –ö—Ä–∞—Å–Ω—ã–π —ç–º–æ–¥–∑–∏
            [InlineKeyboardButton("üü¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã", callback_data="rub_to_usd")]  # –ó–µ–ª–µ–Ω—ã–π —ç–º–æ–¥–∑–∏
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text="<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def calc_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    awaiting_calc = context.user_data.get("awaiting_calc")
    if awaiting_calc:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username}) –≤–≤–µ–ª —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        try:
            amount = float(update.message.text)
            if amount < 0:
                await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return

            usd_rate = await get_usd_to_rub_rate()
            if usd_rate is None:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            if awaiting_calc == "usd_to_rub":
                rub_amount = amount * usd_rate
                message = f"üî¥ {amount} USD = {rub_amount:.2f} RUB"  # –ö—Ä–∞—Å–Ω—ã–π —ç–º–æ–¥–∑–∏
            elif awaiting_calc == "rub_to_usd":
                usd_amount = amount / usd_rate
                message = f"üü¢ {amount} RUB = {usd_amount:.2f} USD"  # –ó–µ–ª–µ–Ω—ã–π —ç–º–æ–¥–∑–∏

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é
            await update.message.reply_text(
                text=message,
                reply_markup=create_further_actions_keyboard()
            )
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            context.user_data.pop("awaiting_calc", None)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        application = Application.builder().token(token).build()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, calc_input))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        application.run_polling(close_loop=False)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        asyncio.run(application.shutdown())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        asyncio.run(application.shutdown())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    main()