import asyncio
from dotenv import load_dotenv
import os
import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_path = os.path.join(os.getcwd(), ".env")
if not os.path.exists(dotenv_path):
    logger.error(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {dotenv_path}")
    exit(1)
else:
    logger.info(f"–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {dotenv_path}")
    load_dotenv(dotenv_path)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
for key in ["TELEGRAM_BOT_TOKEN", "CACHE_TIME"]:
    value = os.getenv(key)
    if value:
        logger.info(f"{key}: {'*' * len(value) if key == 'TELEGRAM_BOT_TOKEN' else value}")
    else:
        logger.warning(f"{key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
token = os.getenv("TELEGRAM_BOT_TOKEN")
if not token:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
    exit(1)

cache_time_env = os.getenv("CACHE_TIME")
try:
    CACHE_TIME_WORLD = int(cache_time_env or 3600)  # –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç (1 —á–∞—Å)
    CACHE_TIME_REGIONAL = 5 * CACHE_TIME_WORLD  # –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç (5 —á–∞—Å–æ–≤)
except ValueError:
    logger.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è CACHE_TIME. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    CACHE_TIME_WORLD = 3600
    CACHE_TIME_REGIONAL = 18000  # 5 —á–∞—Å–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
exchange_rates_world = {}
exchange_rates_regional = {}
last_update_world = 0
last_update_regional = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π ClientSession –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö HTTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
client_session = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async def get_exchange_rates(force_update=False, cache_key="world_rates", cache_time=CACHE_TIME_WORLD):
    global client_session, exchange_rates_world, exchange_rates_regional, last_update_world, last_update_regional
    current_time = time.time()

    if cache_key == "world_rates":
        rates = exchange_rates_world
        last_update = last_update_world
    elif cache_key == "regional_rates":
        rates = exchange_rates_regional
        last_update = last_update_regional
    else:
        return None

    if not force_update and last_update and (current_time - last_update < cache_time):
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã ({cache_key}).")
        return rates

    if client_session is None or (client_session and client_session.closed):
        client_session = aiohttp.ClientSession()

    url = "https://api.exchangerate-api.com/v4/latest/USD"
    try:
        async with client_session.get(url) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({url}): {response.status}")
                return None
            data = await response.json()
            new_rates = data.get("rates", {})
            if cache_key == "world_rates":
                exchange_rates_world = new_rates
                last_update_world = current_time
            elif cache_key == "regional_rates":
                exchange_rates_regional = new_rates
                last_update_regional = current_time
            logger.info(f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({cache_key}).")
            return new_rates
    except aiohttp.ClientConnectionError as e:
        logger.error(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API ({url}): {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({url}): {e}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã", callback_data="update_rates")],
        [InlineKeyboardButton("üåç –ú–∏—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã", callback_data="world_currencies")],
        [InlineKeyboardButton("REGION –í–∞–ª—é—Ç—ã —Å—Ç—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω–∞", callback_data="regional_currencies")],
        [InlineKeyboardButton("üîç –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="convert_currency")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –≤–∞–ª—é—Ç—É –≤ –¥—Ä—É–≥—É—é.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=create_main_keyboard(),
    )

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def preload_exchange_rates():
    global client_session
    if client_session is None or (client_session and client_session.closed):
        client_session = aiohttp.ClientSession()
    logger.info("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
    await get_exchange_rates(force_update=True, cache_key="world_rates", cache_time=CACHE_TIME_WORLD)
    await get_exchange_rates(force_update=True, cache_key="regional_rates", cache_time=CACHE_TIME_REGIONAL)

# –ó–∞–∫—Ä—ã—Ç–∏–µ ClientSession
async def close_connector():
    global client_session
    if client_session and not client_session.closed:
        await client_session.close()
        logger.info("ClientSession —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
    client_session = None

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        application = Application.builder().token(token).build()

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        loop.run_until_complete(preload_exchange_rates())

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        loop.run_until_complete(register_handlers(application))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        loop.run_until_complete(application.run_polling(close_loop=False))

    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        loop.run_until_complete(close_connector())
        if application:
            loop.run_until_complete(application.shutdown())
        loop.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, convert_currency))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."
    if query.data == "update_rates":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã'")
        rates = await get_exchange_rates(force_update=True, cache_key="world_rates", cache_time=CACHE_TIME_WORLD)
        if rates:
            message = "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
        else:
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif query.data == "world_currencies":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–ú–∏—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã'")
        rates = await get_exchange_rates(cache_key="world_rates", cache_time=CACHE_TIME_WORLD)
        if rates:
            world_currencies = {
                "EUR": "–ï–≤—Ä–æ",
                "GBP": "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤",
                "JPY": "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞",
                "CHF": "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
                "CNY": "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å",
                "CAD": "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
                "AUD": "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
            }
            message = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç:\n\n"
            for currency, name in world_currencies.items():
                message += f"{name} ({currency}) = {rates.get(currency, '‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'):.2f} USD\n"
        else:
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif query.data == "regional_currencies":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–í–∞–ª—é—Ç—ã —Å—Ç—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω–∞'")
        rates = await get_exchange_rates(cache_key="regional_rates", cache_time=CACHE_TIME_REGIONAL)
        if rates:
            regional_currencies = {
                "RUB": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
                "UAH": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞",
                "BYN": "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å",
                "KZT": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ",
                "AZN": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç",
                "AMD": "–ê—Ä–º—è–Ω—Å–∫–∏–π –¥—Ä–∞–º",
                "GEL": "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏",
                "KGS": "–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º",
                "MDL": "–ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π",
                "TJS": "–¢–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏",
                "TMT": "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç",
                "UZS": "–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º",
            }
            message = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å—Ç—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
            for currency, name in regional_currencies.items():
                message += f"{name} ({currency}) = {rates.get(currency, '‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'):.2f} USD\n"
        else:
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif query.data == "convert_currency":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤—ã–±—Ä–∞–ª '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É'")
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                 "–°—É–º–º–∞ –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞\n"
                 "–ü—Ä–∏–º–µ—Ä: 100 USD –≤ EUR",
            parse_mode="HTML",
        )
        context.user_data["awaiting_conversion"] = True
        return
    elif query.data == "start":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} ({query.from_user.username}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        message = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await query.edit_message_text(
            text=message,
            parse_mode="HTML",
            reply_markup=create_main_keyboard(),
        )
        return

    if query.data not in ("convert_currency", "start"):
        await query.edit_message_text(
            text=message,
            reply_markup=create_main_keyboard(),
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
async def convert_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_conversion"):
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username}) –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    try:
        user_input = update.message.text.strip().upper()
        parts = user_input.split()
        if len(parts) != 4 or "–í" not in parts:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        amount = float(parts[0])
        from_currency = parts[1]
        to_currency = parts[3]

        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        rates = await get_exchange_rates(cache_key="world_rates", cache_time=CACHE_TIME_WORLD)
        if rates is None or from_currency not in rates or to_currency not in rates:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞.")

        if from_currency == "USD":
            converted_amount = amount * rates[to_currency]
        else:
            usd_rate = rates[from_currency]
            target_rate = rates[to_currency]
            converted_amount = (amount / usd_rate) * target_rate

        message = f"{amount} {from_currency} = {converted_amount:.2f} {to_currency}"
    except ValueError as e:
        message = (
            f"–û—à–∏–±–∫–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
            "–°—É–º–º–∞ –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞\n"
            "–ü—Ä–∏–º–µ—Ä: 100 USD –≤ EUR"
        )
    finally:
        context.user_data.pop("awaiting_conversion", None)
        await update.message.reply_text(
            text=message,
            parse_mode="HTML",
            reply_markup=create_main_keyboard(),
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    main()